input AddDatasetEventInput {
  visitId: VisitId!
  location: DatasetIdInput!
  payload: DatasetEventPayloadInput!
}

type AddDatasetEventResult {
  event: DatasetEvent!
}

input AddSequenceEventInput {
  visitId: VisitId!
  location: SequenceEventLocationInput!
  payload: SequenceEventPayloadInput!
}

type AddSequenceEventResult {
  event: SequenceEvent!
}

input AddStepEventInput {
  visitId: VisitId!
  location: StepEventLocationInput!
  payload: StepEventPayloadInput!
}

type AddStepEventResult {
  event: StepEvent!
}

input AirMassRangeInput {
  min: PosBigDecimal
  max: PosBigDecimal
}

type Allocation {
  partner: Partner!
  duration: NonNegDuration!
}

input AngleInput {
  microarcseconds: Long
  microseconds: BigDecimal
  milliarcseconds: BigDecimal
  milliseconds: BigDecimal
  arcseconds: BigDecimal
  seconds: BigDecimal
  arcminutes: BigDecimal
  minutes: BigDecimal
  degrees: BigDecimal
  hours: BigDecimal
  dms: String
  hms: String
}

interface Atom {
  id: AtomId!
}

scalar AtomId

input BandBrightnessIntegratedInput {
  band: Band!
  value: BigDecimal
  units: BrightnessIntegratedUnits
  error: BigDecimal
}

input BandBrightnessSurfaceInput {
  band: Band!
  value: BigDecimal
  units: BrightnessSurfaceUnits
  error: BigDecimal
}

input BandNormalizedIntegratedInput {
  sed: UnnormalizedSedInput
  brightnesses: [BandBrightnessIntegratedInput!]
}

input BandNormalizedSurfaceInput {
  sed: UnnormalizedSedInput
  brightnesses: [BandBrightnessSurfaceInput!]
}

type Bias implements StepConfig {
  stepType: StepType!
}

enum Breakpoint {
  ENABLED
  DISABLED
}

input CatalogInfoInput {
  name: CatalogName
  id: NonEmptyString
  objectType: NonEmptyString
}

input ClassicalInput {
  minPercentTime: IntPercent
}

input CloneObservationInput {
  observationId: ObservationId!
  SET: ObservationPropertiesInput
}

type CloneObservationResult {
  originalObservation: Observation!
  newObservation: Observation!
}

input CloneTargetInput {
  targetId: TargetId!
  SET: TargetPropertiesInput
  REPLACE_IN: [ObservationId!]
}

type CloneTargetResult {
  originalTarget: Target!
  newTarget: Target!
}

input ConstraintSetInput {
  imageQuality: ImageQuality
  cloudExtinction: CloudExtinction
  skyBackground: SkyBackground
  waterVapor: WaterVapor
  elevationRange: ElevationRangeInput
}

input CoordinatesInput {
  ra: RightAscensionInput
  dec: DeclinationInput
}

input CreateObservationInput {
  programId: ProgramId!
  SET: ObservationPropertiesInput
}

type CreateObservationResult {
  observation: Observation!
}

input CreateProgramInput {
  SET: ProgramPropertiesInput
}

type CreateProgramResult {
  program: Program!
}

input CreateTargetInput {
  programId: ProgramId!
  SET: TargetPropertiesInput!
}

type CreateTargetResult {
  target: Target!
}

type Dark implements StepConfig {
  stepType: StepType!
}

input DatasetEventPayloadInput {
  datasetStage: DatasetStage!
  filename: DatasetFilename
}

input DatasetPropertiesInput {
  qaState: DatasetQaState
}

input DeclinationInput {
  microarcseconds: Long
  degrees: BigDecimal
  dms: DmsString
}

input DeleteObservationsInput {
  WHERE: WhereObservation
  LIMIT: NonNegInt
}

type DeleteObservationsResult {
  observations: [Observation!]!
  hasMore: Boolean!
}

input DeleteTargetsInput {
  WHERE: WhereTarget
  LIMIT: NonNegInt
}

type DeleteTargetsResult {
  targets: [Target!]!
  hasMore: Boolean!
}

input DemoScienceInput {
  minPercentTime: IntPercent
}

input DirectorsTimeInput {
  minPercentTime: IntPercent
}

input EditAsterismsPatchInput {
  ADD: [TargetId!]
  DELETE: [TargetId!]
}

enum EditType {
  CREATED
  UPDATED
}

input ElevationRangeInput {
  airMass: AirMassRangeInput
  hourAngle: HourAngleRangeInput
}

input EmissionLineIntegratedInput {
  wavelength: WavelengthInput!
  lineWidth: PosBigDecimal
  lineFlux: LineFluxIntegratedInput
}

input EmissionLineSurfaceInput {
  wavelength: WavelengthInput!
  lineWidth: PosBigDecimal
  lineFlux: LineFluxSurfaceInput
}

input EmissionLinesIntegratedInput {
  lines: [EmissionLineIntegratedInput!]
  fluxDensityContinuum: FluxDensityContinuumIntegratedInput
}

input EmissionLinesSurfaceInput {
  lines: [EmissionLineSurfaceInput!]
  fluxDensityContinuum: FluxDensityContinuumSurfaceInput
}

interface Event {
  id: Long!
}

input ExchangeInput {
  minPercentTime: IntPercent
}

input ExposureTimeModeInput {
  signalToNoise: SignalToNoiseModeInput
  fixedExposure: FixedExposureModeInput
}

input FastTurnaroundInput {
  minPercentTime: IntPercent
}

input FixedExposureModeInput {
  count: NonNegInt!
  time: NonNegDurationInput!
}

input FluxDensity {
  wavelength: WavelengthInput!
  density: PosBigDecimal!
}

input FluxDensityContinuumIntegratedInput {
  value: PosBigDecimal!
  units: FluxDensityContinuumIntegratedUnits!
}

input FluxDensityContinuumSurfaceInput {
  value: PosBigDecimal!
  units: FluxDensityContinuumSurfaceUnits!
}

input GaussianInput {
  fwhm: AngleInput
  spectralDefinition: SpectralDefinitionIntegratedInput
}

type Gcal implements StepConfig {
  continuum: GcalContinuum
  arcs: [GcalArc!]!
  filter: GcalFilter!
  diffuser: GcalDiffuser!
  shutter: GcalShutter!
  stepType: StepType!
}

enum GcalArc {
  AR_ARC
  TH_AR_ARC
  CU_AR_ARC
  XE_ARC
}

input GcalConfigurationInput {
  continuum: GcalContinuum
  arcs: [GcalArc!]!
  diffuser: GcalDiffuser!
  shutter: GcalShutter!
}

enum GcalContinuum {
  IR_GREY_BODY_LOW
  IR_GREY_BODY_HIGH
  QUARTZ_HALOGEN
}

enum GcalDiffuser {
  IR
  VISIBLE
}

enum GcalFilter {
  NONE
  GMOS
  HROS
  NIR
  ND10
  ND16
  ND20
  ND30
  ND40
  ND45
  ND50
}

enum GcalShutter {
  OPEN
  CLOSED
}

enum GmosAmpCount {
  THREE
  SIX
  TWELVE
}

type GmosCcdMode {
  xBin: GmosXBinning!
  yBin: GmosYBinning!
  ampCount: GmosAmpCount!
  ampGain: GmosAmpGain!
  ampReadMode: GmosAmpReadMode!
}

input GmosCcdReadoutInput {
  xBin: GmosXBinning!
  yBin: GmosYBinning!
  ampCount: GmosAmpCount!
  ampGain: GmosAmpGain!
  ampRead: GmosAmpReadMode!
}

type GmosCustomMask {
  filename: String!
  slitWidth: GmosCustomSlitWidth!
}

input GmosCustomMaskInput {
  filename: String!
  slitWidth: GmosCustomSlitWidth!
}

enum GmosCustomSlitWidth {
  CUSTOM_WIDTH_0_25
  CUSTOM_WIDTH_0_50
  CUSTOM_WIDTH_0_75
  CUSTOM_WIDTH_1_00
  CUSTOM_WIDTH_1_50
  CUSTOM_WIDTH_2_00
  CUSTOM_WIDTH_5_00
}

enum GmosDtax {
  MINUS_SIX
  MINUS_FIVE
  MINUS_FOUR
  MINUS_THREE
  MINUS_TWO
  MINUS_ONE
  ZERO
  ONE
  TWO
  THREE
  FOUR
  FIVE
  SIX
}

enum GmosEOffsetting {
  ON
  OFF
}

enum GmosGratingOrder {
  ZERO
  ONE
  TWO
}

type GmosNodAndShuffle {
  posA: Offset!
  posB: Offset!
  eOffset: GmosEOffsetting!
  shuffleOffset: Int!
  shuffleCycles: Int!
}

input GmosNodAndShuffleInput {
  posA: OffsetInput!
  posB: OffsetInput!
  eOffset: GmosEOffsetting!
  shuffleOffset: Int!
  shuffleCycles: Int!
}

type GmosNorthAtom implements Atom {
  steps: [GmosNorthStep!]!
  time: StepTime!
  id: AtomId!
}

input GmosNorthBiasInput {
  config: GmosNorthDynamicInput!
}

input GmosNorthDarkInput {
  config: GmosNorthDynamicInput!
}

enum GmosNorthDetector {
  E2_V
  HAMAMATSU
}

type GmosNorthDynamic {
  exposure: NonNegDuration!
  readout: GmosCcdMode!
  dtax: GmosDtax!
  roi: GmosRoi!
  gratingConfig: GmosNorthGratingConfig
  filter: GmosNorthFilter
  fpu: GmosNorthFpu
}

input GmosNorthDynamicInput {
  exposure: NonNegDurationInput!
  readout: GmosCcdReadoutInput!
  dtax: GmosDtax!
  roi: GmosRoi!
  gratingConfig: GmosNorthGratingConfigInput
  filter: GmosNorthFilter
  fpu: GmosNorthFpuInput
}

type GmosNorthExecutionConfig implements ExecutionConfig {
  static: GmosNorthStatic!
  acquisition: GmosNorthExecutionSequence!
  science: GmosNorthExecutionSequence!
  visits: [GmosNorthVisitRecord!]!
  instrument: Instrument!
}

type GmosNorthExecutionSequence {
  nextAtom: GmosNorthAtom
  possibleFuture: [GmosNorthAtom!]!
}

type GmosNorthFpu {
  customMask: GmosCustomMask
  builtin: GmosNorthBuiltinFpu
}

input GmosNorthFpuInput {
  customMask: GmosCustomMaskInput
  builtin: GmosNorthBuiltinFpu
}

input GmosNorthGcalInput {
  config: GmosNorthDynamicInput!
  gcalConfig: GcalConfigurationInput!
}

type GmosNorthGratingConfig {
  grating: GmosNorthGrating!
  order: GmosGratingOrder!
  wavelength: Wavelength!
}

input GmosNorthGratingConfigInput {
  grating: GmosNorthGrating!
  order: GmosGratingOrder!
  wavelength: WavelengthInput!
}

input GmosNorthLongSlitInput {
  grating: GmosNorthGrating
  filter: GmosNorthFilter
  fpu: GmosNorthBuiltinFpu
  centralWavelength: WavelengthInput
  explicitXBin: GmosXBinning
  explicitYBin: GmosYBinning
  explicitAmpReadMode: GmosAmpReadMode
  explicitAmpGain: GmosAmpGain
  explicitRoi: GmosRoi
  explicitWavelengthDithers: [WavelengthDitherInput!]
  explicitSpatialOffsets: [OffsetComponentInput!]
}

type GmosNorthManualConfig implements ManualConfig {
  static: GmosNorthStatic!
  acquisition: GmosNorthSequence!
  science: GmosNorthSequence!
  instrument: Instrument!
  plannedTime: PlannedTime!
}

input GmosNorthScienceInput {
  config: GmosNorthDynamicInput!
  offset: OffsetInput!
}

type GmosNorthSequence {
  atoms: [GmosNorthAtom!]!
  time: StepTime!
}

enum GmosNorthStageMode {
  NO_FOLLOW
  FOLLOW_XYZ
  FOLLOW_XY
  FOLLOW_Z
}

type GmosNorthStatic {
  stageMode: GmosNorthStageMode!
  detector: GmosNorthDetector!
  mosPreImaging: MosPreImaging!
  nodAndShuffle: GmosNodAndShuffle
}

input GmosNorthStaticInput {
  detector: GmosNorthDetector!
  mosPreImaging: MosPreImaging!
  nodAndShuffle: GmosNodAndShuffleInput
  stageMode: GmosNorthStageMode!
}

type GmosNorthStep implements Step {
  instrumentConfig: GmosNorthDynamic!
  id: StepId!
  breakpoint: Breakpoint!
  stepConfig: StepConfig!
  time: StepTime!
}

input GmosNorthStepInput {
  bias: GmosNorthBiasInput
  dark: GmosNorthDarkInput
  gcal: GmosNorthGcalInput
  science: GmosNorthScienceInput
}

type GmosNorthStepRecord {
  id: StepId!
  visitId: VisitId!
  created: Timestamp!
  startTime: Timestamp
  endTime: Timestamp
  duration: NonNegDuration!
  instrumentConfig: GmosNorthDynamic!
  stepConfig: StepConfig!
  stepEvents: [StepEvent!]!
  stepQaState: StepQaState
  datasetEvents: [DatasetEvent!]!
  datasets: [Dataset!]!
}

type GmosNorthVisitRecord {
  id: VisitId!
  created: Timestamp!
  startTime: Timestamp
  endTime: Timestamp
  duration: NonNegDuration!
  staticConfig: GmosNorthStatic!
  steps: [GmosNorthStepRecord!]!
  sequenceEvents: [SequenceEvent!]!
}

type GmosSouthAtom implements Atom {
  steps: [GmosSouthStep!]!
  time: StepTime!
  id: AtomId!
}

input GmosSouthBiasInput {
  config: GmosSouthDynamicInput!
}

input GmosSouthDarkInput {
  config: GmosSouthDynamicInput!
}

enum GmosSouthDetector {
  E2_V
  HAMAMATSU
}

type GmosSouthDynamic {
  exposure: NonNegDuration!
  readout: GmosCcdMode!
  dtax: GmosDtax!
  roi: GmosRoi!
  gratingConfig: GmosSouthGratingConfig
  filter: GmosSouthFilter
  fpu: GmosSouthFpu
}

input GmosSouthDynamicInput {
  exposure: NonNegDurationInput!
  readout: GmosCcdReadoutInput!
  dtax: GmosDtax!
  roi: GmosRoi!
  gratingConfig: GmosSouthGratingConfigInput
  filter: GmosSouthFilter
  fpu: GmosSouthFpuInput
}

type GmosSouthExecutionConfig implements ExecutionConfig {
  static: GmosSouthStatic!
  acquisition: GmosSouthExecutionSequence!
  science: GmosSouthExecutionSequence!
  visits: [GmosSouthVisitRecord!]!
  instrument: Instrument!
}

type GmosSouthExecutionSequence {
  nextAtom: GmosSouthAtom
  possibleFuture: [GmosSouthAtom!]!
}

type GmosSouthFpu {
  customMask: GmosCustomMask
  builtin: GmosSouthBuiltinFpu
}

input GmosSouthFpuInput {
  customMask: GmosCustomMaskInput
  builtin: GmosSouthBuiltinFpu
}

input GmosSouthGcalInput {
  config: GmosSouthDynamicInput!
  gcalConfig: GcalConfigurationInput!
}

type GmosSouthGratingConfig {
  grating: GmosSouthGrating!
  order: GmosGratingOrder!
  wavelength: Wavelength!
}

input GmosSouthGratingConfigInput {
  grating: GmosSouthGrating!
  order: GmosGratingOrder!
  wavelength: WavelengthInput!
}

input GmosSouthLongSlitInput {
  grating: GmosSouthGrating
  filter: GmosSouthFilter
  fpu: GmosSouthBuiltinFpu
  centralWavelength: WavelengthInput
  explicitXBin: GmosXBinning
  explicitYBin: GmosYBinning
  explicitAmpReadMode: GmosAmpReadMode
  explicitAmpGain: GmosAmpGain
  explicitRoi: GmosRoi
  explicitWavelengthDithers: [WavelengthDitherInput!]
  explicitSpatialOffsets: [OffsetComponentInput!]
}

type GmosSouthManualConfig implements ManualConfig {
  static: GmosSouthStatic!
  acquisition: GmosSouthSequence!
  science: GmosSouthSequence!
  instrument: Instrument!
  plannedTime: PlannedTime!
}

input GmosSouthScienceInput {
  config: GmosSouthDynamicInput!
  offset: OffsetInput!
}

type GmosSouthSequence {
  atoms: [GmosSouthAtom!]!
  time: StepTime!
}

enum GmosSouthStageMode {
  NO_FOLLOW
  FOLLOW_XYZ
  FOLLOW_XY
  FOLLOW_Z
}

type GmosSouthStatic {
  stageMode: GmosSouthStageMode!
  detector: GmosSouthDetector!
  mosPreImaging: MosPreImaging!
  nodAndShuffle: GmosNodAndShuffle
}

input GmosSouthStaticInput {
  detector: GmosNorthDetector!
  mosPreImaging: MosPreImaging!
  nodAndShuffle: GmosNodAndShuffleInput
  stageMode: GmosSouthStageMode!
}

type GmosSouthStep implements Step {
  instrumentConfig: GmosSouthDynamic!
  id: StepId!
  breakpoint: Breakpoint!
  stepConfig: StepConfig!
  time: StepTime!
}

input GmosSouthStepInput {
  bias: GmosSouthBiasInput
  dark: GmosSouthDarkInput
  gcal: GmosSouthGcalInput
  science: GmosSouthScienceInput
}

type GmosSouthStepRecord {
  id: StepId!
  visitId: VisitId!
  created: Timestamp!
  startTime: Timestamp
  endTime: Timestamp
  duration: NonNegDuration!
  instrumentConfig: GmosSouthDynamic!
  stepConfig: StepConfig!
  stepEvents: [StepEvent!]!
  stepQaState: StepQaState
  datasetEvents: [DatasetEvent!]!
  datasets: [Dataset!]!
}

type GmosSouthVisitRecord {
  id: VisitId!
  created: Timestamp!
  startTime: Timestamp
  endTime: Timestamp
  duration: NonNegDuration!
  staticConfig: GmosSouthStatic!
  steps: [GmosSouthStepRecord!]!
  sequenceEvents: [SequenceEvent!]!
}

input HourAngleRangeInput {
  minHours: BigDecimal
  maxHours: BigDecimal
}

input IntensiveInput {
  minPercentTime: IntPercent
  minPercentTotalTime: IntPercent
  totalTime: NonNegDurationInput
}

input LargeProgramInput {
  minPercentTime: IntPercent
  minPercentTotalTime: IntPercent
  totalTime: NonNegDurationInput
}

input LineFluxIntegratedInput {
  value: PosBigDecimal!
  units: LineFluxIntegratedUnits!
}

input LineFluxSurfaceInput {
  value: PosBigDecimal!
  units: LineFluxSurfaceUnits!
}

"""Link user"""
input LinkUserInput {
  """The program to add a user to."""
  programId: ProgramId!

  """The user to be added."""
  userId: UserId!

  """The role this user will play in the program."""
  role: ProgramUserRole!

  """Must be specified if and only if 'role' is SUPPORT"""
  supportType: ProgramUserSupportRoleType

  """Must be specified if and only if 'supportType' is PARTNER"""
  supportPartner: Partner
}

type LinkUserResult {
  user: ProgramUser!
}

enum MosPreImaging {
  IS_MOS_PRE_IMAGING
  IS_NOT_MOS_PRE_IMAGING
}

type Mutation {
  addDatasetEvent(input: AddDatasetEventInput!): AddDatasetEventResult!
  addSequenceEvent(input: AddSequenceEventInput!): AddSequenceEventResult!
  addStepEvent(input: AddStepEventInput!): AddStepEventResult!
  cloneObservation(input: CloneObservationInput!): CloneObservationResult!
  cloneTarget(input: CloneTargetInput!): CloneTargetResult!
  createObservation(input: CreateObservationInput!): CreateObservationResult!
  createProgram(input: CreateProgramInput!): CreateProgramResult!
  createTarget(input: CreateTargetInput!): CreateTargetResult!
  deleteObservations(input: DeleteObservationsInput!): DeleteObservationsResult!
  deleteTargets(input: DeleteTargetsInput!): DeleteTargetsResult!

  """
  Link a user to a program. Any existing link will be replaced.
  This operation is available only to Admin and Service users.
  """
  linkUser(input: LinkUserInput!): LinkUserResult!
  recordGmosNorthStep(input: RecordGmosNorthStepInput!): RecordGmosNorthStepResult!
  recordGmosNorthVisit(input: RecordGmosNorthVisitInput!): RecordGmosNorthVisitResult!
  recordGmosSouthStep(input: RecordGmosSouthStepInput!): RecordGmosSouthStepResult!
  recordGmosSouthVisit(input: RecordGmosSouthVisitInput!): RecordGmosSouthVisitResult!

  """Set the allocation for a program from the specified partner."""
  setAllocation(input: SetAllocationInput!): SetAllocationResult!
  undeleteObservations(input: UndeleteObservationsInput!): UndeleteObservationsResult!
  undeleteTargets(input: UndeleteTargetsInput!): UndeleteTargetsResult!

  """
  Unlink a user from a program.
  This operation is available only to Admin and Service users.
  """
  unlinkUser(
    """The program to unlink the user from."""
    programId: ProgramId!

    """The user to unlink."""
    userId: UserId!
  ): UnlinkUserResult!
  updateAsterisms(input: UpdateAsterismsInput!): UpdateAsterismsResult!
  updateDatasets(input: UpdateDatasetsInput!): UpdateDatasetsResult!
  updateObservations(input: UpdateObservationsInput!): UpdateObservationsResult!
  updatePrograms(input: UpdateProgramsInput!): UpdateProgramsResult!
  updateTargets(input: UpdateTargetsInput!): UpdateTargetsResult!
}

input NonNegDurationInput {
  microseconds: PosLong
  milliseconds: NonNegBigDecimal
  seconds: NonNegBigDecimal
  minutes: NonNegBigDecimal
  hours: NonNegBigDecimal
}

input NonsiderealInput {
  keyType: EphemerisKeyType
  des: NonEmptyString
  key: NonEmptyString
}

type ObservationEdit {
  editType: EditType!
  value: Observation!
  id: Long!
}

input ObservationPropertiesInput {
  subtitle: NonEmptyString
  status: ObsStatus
  activeStatus: ObsActiveStatus
  visualizationTime: Timestamp
  posAngleConstraint: PosAngleConstraintInput
  targetEnvironment: TargetEnvironmentInput
  constraintSet: ConstraintSetInput
  scienceRequirements: ScienceRequirementsInput
  observingMode: ObservingModeInput
  existence: Existence
}

type Offset {
  p: p!
  q: q!
}

input OffsetComponentInput {
  microarcseconds: Long
  milliarcseconds: BigDecimal
  arcseconds: BigDecimal
}

input OffsetInput {
  p: OffsetComponentInput!
  q: OffsetComponentInput!
}

input ParallaxInput {
  microarcseconds: Long
  milliarcseconds: BigDecimal
}

type PartnerMeta {
  tag: Partner!
  shortName: String!
  longName: String!
  active: Boolean!
}

input PartnerSplitInput {
  partner: Partner!
  percent: IntPercent!
}

input PoorWeatherInput {
  minPercentTime: IntPercent
}

input PosAngleConstraintInput {
  mode: PosAngleConstraintMode
  angle: AngleInput
}

scalar PosLong

type ProgramEdit {
  editType: EditType!
  value: Program!
  id: Long!
}

input ProgramPropertiesInput {
  name: NonEmptyString
  proposal: ProposalInput
  existence: Existence
}

enum ProgramUserRole {
  """Co-Investigator"""
  COI

  """Observer (read-only access)"""
  OBSERVER

  """Staff/Partner Support"""
  SUPPORT
}

enum ProgramUserSupportRoleType {
  """Staff support"""
  STAFF

  """Partner support"""
  PARTNER
}

type ProgramUser {
  role: ProgramUserRole!
  userId: UserId!
  user: User
}

input ProperMotionComponentInput {
  microarcsecondsPerYear: Long
  milliarcsecondsPerYear: BigDecimal
}

input ProperMotionInput {
  ra: ProperMotionComponentInput!
  dec: ProperMotionComponentInput!
}

input ProposalClassInput {
  classical: ClassicalInput
  demoScience: DemoScienceInput
  directorsTime: DirectorsTimeInput
  exchange: ExchangeInput
  fastTurnaround: FastTurnaroundInput
  poorWeather: PoorWeatherInput
  queue: QueueInput
  systemVerification: SystemVerificationInput
  largeProgram: LargeProgramInput
  intensive: IntensiveInput
}

input ProposalInput {
  title: NonEmptyString
  proposalClass: ProposalClassInput
  category: tacCategory
  toOActivation: toOActivation
  abstract: NonEmptyString
  partnerSplits: [PartnerSplitInput!]
}

input QueueInput {
  minPercentTime: IntPercent
}

input RadialVelocityInput {
  centimetersPerSecond: Long
  metersPerSecond: BigDecimal
  kilometersPerSecond: BigDecimal
}

input RecordGmosNorthStepInput {
  observationId: ObservationId!
  visitId: VisitId!
  stepConfig: GmosNorthStepInput!
}

type RecordGmosNorthStepResult {
  stepRecord: GmosNorthStepRecord!
}

input RecordGmosNorthVisitInput {
  observationId: ObservationId!
  static: GmosNorthStaticInput!
}

type RecordGmosNorthVisitResult {
  visitRecord: GmosNorthVisitRecord!
}

input RecordGmosSouthStepInput {
  observationId: ObservationId!
  visitId: VisitId!
  stepConfig: GmosSouthStepInput!
}

type RecordGmosSouthStepResult {
  stepRecord: GmosSouthStepRecord!
}

input RecordGmosSouthVisitInput {
  observationId: ObservationId!
  static: GmosSouthStaticInput!
}

type RecordGmosSouthVisitResult {
  visitRecord: GmosSouthVisitRecord!
}

input RightAscensionInput {
  microarcseconds: Long
  degrees: BigDecimal
  hours: BigDecimal
  hms: HmsString
}

type Science implements StepConfig {
  offset: Offset!
  stepType: StepType!
}

input ObservingModeInput {
  gmosNorthLongSlit: GmosNorthLongSlitInput
  gmosSouthLongSlit: GmosSouthLongSlitInput
}

input ScienceRequirementsInput {
  mode: ScienceMode
  spectroscopy: SpectroscopyScienceRequirementsInput
}

input SequenceEventLocationInput {
  observationId: ObservationId!
}

input SequenceEventPayloadInput {
  command: SequenceCommand!
}

input SetAllocationInput {
  programId: ProgramId!
  partner: Partner!
  duration: DurationInput!
}

type SetAllocationResult {
  allocation: Allocation!
}

input SiderealInput {
  ra: RightAscensionInput
  dec: DeclinationInput
  epoch: EpochString
  properMotion: ProperMotionInput
  radialVelocity: RadialVelocityInput
  parallax: ParallaxInput
  catalogInfo: CatalogInfoInput
}

input SignalToNoiseModeInput {
  value: PosBigDecimal!
}

input SourceProfileInput {
  point: SpectralDefinitionIntegratedInput
  uniform: SpectralDefinitionSurfaceInput
  gaussian: GaussianInput
}

input SpectralDefinitionIntegratedInput {
  bandNormalized: BandNormalizedIntegratedInput
  emissionLines: EmissionLinesIntegratedInput
}

input SpectralDefinitionSurfaceInput {
  bandNormalized: BandNormalizedSurfaceInput
  emissionLines: EmissionLinesSurfaceInput
}

input SpectroscopyScienceRequirementsInput {
  wavelength: WavelengthInput
  resolution: PosInt
  signalToNoise: PosBigDecimal
  signalToNoiseAt: WavelengthInput
  wavelengthCoverage: WavelengthInput
  focalPlane: FocalPlane
  focalPlaneAngle: AngleInput
  capability: SpectroscopyCapabilities
}

interface Step {
  id: StepId!
  breakpoint: Breakpoint!
  stepConfig: StepConfig!
  time: StepTime!
}

interface StepConfig {
  stepType: StepType!
}

input StepEventLocationInput {
  observationId: ObservationId!
  stepId: StepId!
}

input StepEventPayloadInput {
  sequenceType: SequenceType!
  stepStage: StepStage!
}

enum StepQaState {
  PASS
  FAIL
}

enum StepType {
  BIAS
  DARK
  GCAL
  SCIENCE
  SMART_GCAL
}

type Subscription {
  observationEdit(input: ObservationEditInput): ObservationEdit!
  programEdit(input: ProgramEditInput): ProgramEdit!
  targetEdit(targetId: TargetId, programId: ProgramId): TargetEdit!
}

input ObservationEditInput {
  observationId: ObservationId
  programId: ProgramId
}

input ProgramEditInput {
  programId: ProgramId
}

input SystemVerificationInput {
  minPercentTime: IntPercent
}

type TargetEdit implements Event {
  editType: EditType!
  value: Target!
  id: Long!
}

input TargetEnvironmentInput {
  explicitBase: CoordinatesInput
  asterism: [TargetId!]
}

input TargetPropertiesInput {
  name: NonEmptyString
  sidereal: SiderealInput
  nonsidereal: NonsiderealInput
  sourceProfile: SourceProfileInput
  existence: Existence
}

input UndeleteObservationsInput {
  WHERE: WhereObservation
  LIMIT: NonNegInt
}

type UndeleteObservationsResult {
  observations: [Observation!]!
  hasMore: Boolean!
}

input UndeleteTargetsInput {
  WHERE: WhereTarget
  LIMIT: NonNegInt
}

type UndeleteTargetsResult {
  targets: [Target!]!
  hasMore: Boolean!
}

input UnnormalizedSedInput {
  stellarLibrary: StellarLibrarySpectrum
  coolStar: CoolStarTemperature
  galaxy: GalaxySpectrum
  planet: PlanetSpectrum
  quasar: QuasarSpectrum
  hiiRegion: HiiRegionSpectrum
  planetaryNebula: PlanetaryNebulaSpectrum
  powerLaw: BigDecimal
  blackBodyTempK: PosInt
  fluxDensities: [FluxDensity!]
}

input UpdateAsterismsInput {
  programId: ProgramId!
  SET: EditAsterismsPatchInput!
  WHERE: WhereObservation
  LIMIT: NonNegInt
  includeDeleted: Boolean = false
}

type UpdateAsterismsResult {
  observations: [Observation!]!
  hasMore: Boolean!
}

input UpdateDatasetsInput {
  SET: DatasetPropertiesInput!
  WHERE: WhereDataset
  LIMIT: NonNegInt
}

type UpdateDatasetsResult {
  datasets: [Dataset!]!
  hasMore: Boolean!
}

input UpdateObservationsInput {
  programId: ProgramId!
  SET: ObservationPropertiesInput!
  WHERE: WhereObservation
  LIMIT: NonNegInt
  includeDeleted: Boolean = false
}

type UpdateObservationsResult {
  observations: [Observation!]!
  hasMore: Boolean!
}

input UpdateProgramsInput {
  SET: ProgramPropertiesInput!
  WHERE: WhereProgram
  LIMIT: NonNegInt
  includeDeleted: Boolean = false
}

type UpdateProgramsResult {
  programs: [Program!]!
  hasMore: Boolean!
}

input UpdateTargetsInput {
  SET: TargetPropertiesInput!
  WHERE: WhereTarget
  LIMIT: NonNegInt
  includeDeleted: Boolean = false
}

type UpdateTargetsResult {
  targets: [Target!]!
  hasMore: Boolean!
}

input WavelengthInput {
  picometers: PosInt
  angstroms: PosBigDecimal
  nanometers: PosBigDecimal
  micrometers: PosBigDecimal
}

input WavelengthDitherInput {
  picometers: Int
  angstroms: BigDecimal
  nanometers: BigDecimal
  micrometers: BigDecimal
}

type p {
  microarcseconds: Long!
  milliarcseconds: BigDecimal!
  arcseconds: BigDecimal!
}

enum tacCategory {
  SMALL_BODIES
  PLANETARY_ATMOSPHERES
  PLANETARY_SURFACES
  SOLAR_SYSTEM_OTHER
  EXOPLANET_RADIAL_VELOCITIES
  EXOPLANET_ATMOSPHERES_ACTIVITY
  EXOPLANET_TRANSITS
  EXOPLANET_HOST_STAR
  EXOPLANET_OTHER
  STELLAR_ASTROPHYSICS
  STELLAR_POPULATIONS
  STAR_FORMATION
  GASEOUS_ASTROPHYSICS
  STELLAR_REMNANTS
  GALACTIC_OTHER
  COSMOLOGY
  CLUSTERS_OF_GALAXIES
  HIGH_Z_UNIVERSE
  LOW_Z_UNIVERSE
  ACTIVE_GALAXIES
  EXTRAGALACTIC_OTHER
}

enum toOActivation {
  NONE
  STANDARD
  RAPID
}

type AirMassRange {
  min: PosBigDecimal!
  max: PosBigDecimal!
}

type Angle {
  microarcseconds: Long!
  microseconds: BigDecimal!
  milliarcseconds: BigDecimal!
  milliseconds: BigDecimal!
  arcseconds: BigDecimal!
  seconds: BigDecimal!
  arcminutes: BigDecimal!
  minutes: BigDecimal!
  degrees: BigDecimal!
  hours: BigDecimal!
  hms: String!
  dms: String!
}

type AsterismGroup {
  observationIds: [ObservationId!]!
  observations(includeDeleted: Boolean! = false, OFFSET: ObservationId, LIMIT: NonNegInt): ObservationSelectResult!
  asterism: [Target!]!
}

type AsterismGroupSelectResult {
  matches: [AsterismGroup!]!
  hasMore: Boolean!
}

enum Band {
  SLOAN_U
  SLOAN_G
  SLOAN_R
  SLOAN_I
  SLOAN_Z
  U
  B
  V
  R
  I
  Y
  J
  H
  K
  L
  M
  N
  Q
  AP
  GAIA
  GAIA_BP
  GAIA_RP
}

type BandBrightnessIntegrated {
  band: Band!
  value: BigDecimal!
  units: BrightnessIntegratedUnits!
  error: BigDecimal
}

type BandBrightnessSurface {
  band: Band!
  value: BigDecimal!
  units: BrightnessSurfaceUnits!
  error: BigDecimal
}

interface BandNormalized {
  sed: UnnormalizedSed!
}

type BandNormalizedIntegrated implements BandNormalized {
  brightnesses: [BandBrightnessIntegrated!]!
  sed: UnnormalizedSed!
}

type BandNormalizedSurface implements BandNormalized {
  brightnesses: [BandBrightnessSurface!]!
  sed: UnnormalizedSed!
}

enum BrightnessIntegratedUnits {
  VEGA_MAGNITUDE
  AB_MAGNITUDE
  JANSKY
  W_PER_M_SQUARED_PER_UM
  ERG_PER_S_PER_CM_SQUARED_PER_A
  ERG_PER_S_PER_CM_SQUARED_PER_HZ
}

enum BrightnessSurfaceUnits {
  VEGA_MAG_PER_ARCSEC_SQUARED
  AB_MAG_PER_ARCSEC_SQUARED
  JY_PER_ARCSEC_SQUARED
  W_PER_M_SQUARED_PER_UM_PER_ARCSEC_SQUARED
  ERG_PER_S_PER_CM_SQUARED_PER_A_PER_ARCSEC_SQUARED
  ERG_PER_S_PER_CM_SQUARED_PER_HZ_PER_ARCSEC_SQUARED
}

type CatalogInfo {
  name: CatalogName!
  id: String!
  objectType: String
}

enum CatalogName {
  SIMBAD
  HORIZON
  GAIA
}

type Classical implements ProposalClass {
  minPercentTime: IntPercent!
}

enum CloudExtinction {
  POINT_ONE
  POINT_THREE
  POINT_FIVE
  ONE_POINT_ZERO
  ONE_POINT_FIVE
  TWO_POINT_ZERO
  THREE_POINT_ZERO
}

enum ObservingModeType {
  GMOS_NORTH_LONG_SLIT
  GMOS_SOUTH_LONG_SLIT
}

type ConstraintSet {
  imageQuality: ImageQuality!
  cloudExtinction: CloudExtinction!
  skyBackground: SkyBackground!
  waterVapor: WaterVapor!
  elevationRange: ElevationRange!
}

type ConstraintSetGroup {
  observationIds: [ObservationId!]!
  observations(includeDeleted: Boolean! = false, OFFSET: ObservationId, LIMIT: NonNegInt): ObservationSelectResult!
  programId: ProgramId!
  constraintSet: ConstraintSet!
}

type ConstraintSetGroupSelectResult {
  matches: [ConstraintSetGroup!]!
  hasMore: Boolean!
}

enum CoolStarTemperature {
  T400_K
  T600_K
  T800_K
  T900_K
  T1000_K
  T1200_K
  T1400_K
  T1600_K
  T1800_K
  T2000_K
  T2200_K
  T2400_K
  T2600_K
  T2800_K
}

type Coordinates {
  ra: RightAscension!
  dec: Declination!
}

type Dataset {
  observation: Observation!
  id: DatasetId!
  filename: DatasetFilename!
  qaState: DatasetQaState
}

type DatasetEvent implements ExecutionEvent {
  datasetId: DatasetId!
  payload: DatasetEventPayload!
  id: ExecutionEventId!
  visitId: VisitId!
  observation: Observation!
  received: Timestamp!
}

type DatasetEventPayload {
  filename: DatasetFilename
  datasetStage: DatasetStage!
}

scalar DatasetFilename

type DatasetId {
  observationId: ObservationId!
  stepId: StepId!
  index: PosInt!
}

input DatasetIdInput {
  observationId: ObservationId!
  stepId: StepId!
  index: PosInt!
}

enum DatasetQaState {
  PASS
  USABLE
  FAIL
}

type DatasetSelectResult {
  matches: [Dataset!]!
  hasMore: Boolean!
}

enum DatasetStage {
  END_OBSERVE
  END_READOUT
  END_WRITE
  START_OBSERVE
  START_READOUT
  START_WRITE
}

type Declination {
  dms: DmsString!
  degrees: BigDecimal!
  microarcseconds: Long!
}

type DemoScience implements ProposalClass {
  minPercentTime: IntPercent!
}

type DirectorsTime implements ProposalClass {
  minPercentTime: IntPercent!
}

scalar DmsString

type Duration {
  microseconds: Long!
  milliseconds: BigDecimal!
  seconds: BigDecimal!
  minutes: BigDecimal!
  hours: BigDecimal!
}

input DurationInput {
  microseconds: Long
  milliseconds: BigDecimal
  seconds: BigDecimal
  minutes: BigDecimal
  hours: BigDecimal
}

type ElevationRange {
  airMass: AirMassRange
  hourAngle: HourAngleRange
}

type EmissionLineIntegrated {
  wavelength: Wavelength!
  lineWidth: PosBigDecimal!
  lineFlux: LineFluxIntegrated!
}

type EmissionLineSurface {
  wavelength: Wavelength!
  lineWidth: PosBigDecimal!
  lineFlux: LineFluxSurface!
}

type EmissionLinesIntegrated {
  lines: [EmissionLineIntegrated!]!
  fluxDensityContinuum: FluxDensityContinuumIntegrated!
}

type EmissionLinesSurface {
  lines: [EmissionLineSurface!]!
  fluxDensityContinuum: FluxDensityContinuumSurface!
}

enum EphemerisKeyType {
  COMET
  ASTEROID_NEW
  ASTEROID_OLD
  MAJOR_BODY
  USER_SUPPLIED
}

scalar EpochString

type Exchange implements ProposalClass {
  minPercentTime: IntPercent!
}

type Execution {
  datasets(OFFSET: DatasetIdInput, LIMIT: NonNegInt): DatasetSelectResult!
  events(OFFSET: ExecutionEventId, LIMIT: NonNegInt): ExecutionEventSelectResult!
  executionConfig: ExecutionConfig!
}

interface ExecutionConfig {
  instrument: Instrument!
}

interface ExecutionEvent {
  id: ExecutionEventId!
  visitId: VisitId!
  observation: Observation!
  received: Timestamp!
}

scalar ExecutionEventId

type ExecutionEventSelectResult {
  matches: [ExecutionEvent!]!
  hasMore: Boolean!
}

enum Existence {
  PRESENT
  DELETED
}

type ExposureTimeMode {
  signalToNoise: SignalToNoiseMode
  fixedExposure: FixedExposureMode
}

type FastTurnaround implements ProposalClass {
  minPercentTime: IntPercent!
}

type FilterTypeMeta {
  tag: FilterType!
  shortName: String!
  longName: String!
}

type FixedExposureMode {
  count: NonNegInt!
  time: NonNegDuration!
}

type FluxDensityContinuumIntegrated {
  value: PosBigDecimal!
  units: FluxDensityContinuumIntegratedUnits!
}

enum FluxDensityContinuumIntegratedUnits {
  W_PER_M_SQUARED_PER_UM
  ERG_PER_S_PER_CM_SQUARED_PER_A
}

type FluxDensityContinuumSurface {
  value: PosBigDecimal!
  units: FluxDensityContinuumSurfaceUnits!
}

enum FluxDensityContinuumSurfaceUnits {
  W_PER_M_SQUARED_PER_UM_PER_ARCSEC_SQUARED
  ERG_PER_S_PER_CM_SQUARED_PER_A_PER_ARCSEC_SQUARED
}

type FluxDensityEntry {
  wavelength: Wavelength!
  density: PosBigDecimal!
}

enum FocalPlane {
  SINGLE_SLIT
  MULTIPLE_SLIT
  IFU
}

enum GalaxySpectrum {
  ELLIPTICAL
  SPIRAL
}

type GaussianSource {
  fwhm: Angle!
  bandNormalized: BandNormalizedIntegrated
  emissionLines: EmissionLinesIntegrated
}

enum GmosAmpGain {
  LOW
  HIGH
}

enum GmosAmpReadMode {
  SLOW
  FAST
}

enum GmosNorthBuiltinFpu {
  NS0
  NS1
  NS2
  NS3
  NS4
  NS5
  LONG_SLIT_0_25
  LONG_SLIT_0_50
  LONG_SLIT_0_75
  LONG_SLIT_1_00
  LONG_SLIT_1_50
  LONG_SLIT_2_00
  LONG_SLIT_5_00
  IFU2_SLITS
  IFU_BLUE
  IFU_RED
}

enum GmosNorthFilter {
  G_PRIME
  R_PRIME
  I_PRIME
  Z_PRIME
  Z
  Y
  GG455
  OG515
  RG610
  CA_T
  HA
  HA_C
  DS920
  SII
  OIII
  OIIIC
  HE_II
  HE_IIC
  HARTMANN_A_R_PRIME
  HARTMANN_B_R_PRIME
  G_PRIME_GG455
  G_PRIME_OG515
  R_PRIME_RG610
  I_PRIME_CA_T
  Z_PRIME_CA_T
  U_PRIME
}

enum GmosNorthGrating {
  B1200_G5301
  R831_G5302
  B600_G5303
  B600_G5307
  R600_G5304
  B480_G5309
  R400_G5305
  R150_G5306
  R150_G5308
}

type GmosNorthLongSlit {
  grating: GmosNorthGrating!
  filter: GmosNorthFilter
  fpu: GmosNorthBuiltinFpu!
  centralWavelength: Wavelength!
  xBin: GmosXBinning!
  defaultXBin: GmosXBinning!
  explicitXBin: GmosXBinning
  yBin: GmosYBinning!
  defaultYBin: GmosYBinning!
  explicitYBin: GmosYBinning
  ampReadMode: GmosAmpReadMode!
  defaultAmpReadMode: GmosAmpReadMode!
  explicitAmpReadMode: GmosAmpReadMode
  ampGain: GmosAmpGain!
  defaultAmpGain: GmosAmpGain!
  explicitAmpGain: GmosAmpGain
  roi: GmosRoi!
  defaultRoi: GmosRoi!
  explicitRoi: GmosRoi
  wavelengthDithers: [WavelengthDither!]!
  defaultWavelengthDithers: [WavelengthDither!]!
  explicitWavelengthDithers: [WavelengthDither!]
  spatialOffsets: [q!]!
  defaultSpatialOffsets: [q!]!
  explicitSpatialOffsets: [q!]
  initialGrating: GmosNorthGrating!
  initialFilter: GmosNorthFilter
  initialFpu: GmosNorthBuiltinFpu!
  initialCentralWavelength: Wavelength!
}

enum GmosRoi {
  FULL_FRAME
  CCD2
  CENTRAL_SPECTRUM
  CENTRAL_STAMP
  TOP_SPECTRUM
  BOTTOM_SPECTRUM
  CUSTOM
}

enum GmosSouthBuiltinFpu {
  BHROS
  NS1
  NS2
  NS3
  NS4
  NS5
  LONG_SLIT_0_25
  LONG_SLIT_0_50
  LONG_SLIT_0_75
  LONG_SLIT_1_00
  LONG_SLIT_1_50
  LONG_SLIT_2_00
  LONG_SLIT_5_00
  IFU2_SLITS
  IFU_BLUE
  IFU_RED
  IFU_NS2_SLITS
  IFU_NS_BLUE
  IFU_NS_RED
}

enum GmosSouthFilter {
  U_PRIME
  G_PRIME
  R_PRIME
  I_PRIME
  Z_PRIME
  Z
  Y
  GG455
  OG515
  RG610
  RG780
  CA_T
  HARTMANN_A_R_PRIME
  HARTMANN_B_R_PRIME
  G_PRIME_GG455
  G_PRIME_OG515
  R_PRIME_RG610
  I_PRIME_RG780
  I_PRIME_CA_T
  Z_PRIME_CA_T
  HA
  SII
  HA_C
  OIII
  OIIIC
  HE_II
  HE_IIC
  LYA395
}

enum GmosSouthGrating {
  B1200_G5321
  R831_G5322
  B600_G5323
  R600_G5324
  B480_G5327
  R400_G5325
  R150_G5326
}

type GmosSouthLongSlit {
  grating: GmosSouthGrating!
  filter: GmosSouthFilter
  fpu: GmosSouthBuiltinFpu!
  centralWavelength: Wavelength!
  xBin: GmosXBinning!
  defaultXBin: GmosXBinning!
  explicitXBin: GmosXBinning
  yBin: GmosYBinning!
  defaultYBin: GmosYBinning!
  explicitYBin: GmosYBinning
  ampReadMode: GmosAmpReadMode!
  defaultAmpReadMode: GmosAmpReadMode!
  explicitAmpReadMode: GmosAmpReadMode
  ampGain: GmosAmpGain!
  defaultAmpGain: GmosAmpGain!
  explicitAmpGain: GmosAmpGain
  roi: GmosRoi!
  defaultRoi: GmosRoi!
  explicitRoi: GmosRoi
  wavelengthDithers: [WavelengthDither!]!
  defaultWavelengthDithers: [WavelengthDither!]!
  explicitWavelengthDithers: [WavelengthDither!]
  spatialOffsets: [q!]!
  defaultSpatialOffsets: [q!]!
  explicitSpatialOffsets: [q!]
  initialGrating: GmosSouthGrating!
  initialFilter: GmosSouthFilter
  initialFpu: GmosSouthBuiltinFpu!
  initialCentralWavelength: Wavelength!
}

enum GmosXBinning {
  ONE
  TWO
  FOUR
}

enum GmosYBinning {
  ONE
  TWO
  FOUR
}

enum HiiRegionSpectrum {
  ORION_NEBULA
}

scalar HmsString

type HourAngleRange {
  minHours: BigDecimal!
  maxHours: BigDecimal!
}

enum ImageQuality {
  POINT_ONE
  POINT_TWO
  POINT_THREE
  POINT_FOUR
  POINT_SIX
  POINT_EIGHT
  ONE_POINT_ZERO
  ONE_POINT_FIVE
  TWO_POINT_ZERO
}

scalar Timestamp

enum Instrument {
  ACQ_CAM
  BHROS
  FLAMINGOS2
  GHOST
  GMOS_NORTH
  GMOS_SOUTH
  GNIRS
  GPI
  GSAOI
  MICHELLE
  NICI
  NIFS
  NIRI
  PHOENIX
  TRECS
  VISITOR
  SCORPIO
  ALOPEKE
  ZORRO
}

scalar IntPercent

type Intensive implements ProposalClass {
  minPercentTime: IntPercent!
  minPercentTotalTime: IntPercent!
  totalTime: NonNegDuration!
}

type ItcSuccess {
  exposureTime: NonNegDuration!
  exposures: NonNegInt!
  signalToNoise: PosBigDecimal!
}

type LargeProgram implements ProposalClass {
  minPercentTime: IntPercent!
  minPercentTotalTime: IntPercent!
  totalTime: NonNegDuration!
}

type LineFluxIntegrated {
  value: PosBigDecimal!
  units: LineFluxIntegratedUnits!
}

enum LineFluxIntegratedUnits {
  W_PER_M_SQUARED
  ERG_PER_S_PER_CM_SQUARED
}

type LineFluxSurface {
  value: PosBigDecimal!
  units: LineFluxSurfaceUnits!
}

enum LineFluxSurfaceUnits {
  W_PER_M_SQUARED_PER_ARCSEC_SQUARED
  ERG_PER_S_PER_CM_SQUARED_PER_ARCSEC_SQUARED
}

interface ManualConfig {
  instrument: Instrument!
  plannedTime: PlannedTime!
}

scalar NonEmptyString

scalar NonNegBigDecimal

type NonNegDuration {
  microseconds: NonNegLong!
  milliseconds: NonNegBigDecimal!
  seconds: NonNegBigDecimal!
  minutes: NonNegBigDecimal!
  hours: NonNegBigDecimal!
  iso: String!
}

scalar NonNegInt

scalar NonNegLong

type Nonsidereal {
  des: String!
  keyType: EphemerisKeyType!
  key: String!
}

enum ObsActiveStatus {
  ACTIVE
  INACTIVE
}

enum ObsStatus {
  NEW
  INCLUDED
  PROPOSED
  APPROVED
  FOR_REVIEW
  READY
  ONGOING
  OBSERVED
}

type Observation {
  id: ObservationId!
  existence: Existence!
  title: String!
  subtitle: NonEmptyString
  status: ObsStatus!
  activeStatus: ObsActiveStatus!
  visualizationTime: Timestamp
  posAngleConstraint: PosAngleConstraint!
  plannedTime: PlannedTimeSummary!
  program: Program!
  targetEnvironment: TargetEnvironment!
  constraintSet: ConstraintSet!
  scienceRequirements: ScienceRequirements!
  observingMode: ObservingMode
  itc(useCache: Boolean! = true): ItcSuccess
  manualConfig: ManualConfig
  execution: Execution!
}

scalar ObservationId

type ObservationSelectResult {
  matches: [Observation!]!
  hasMore: Boolean!
}

type Parallax {
  microarcseconds: Long!
  milliarcseconds: BigDecimal!
}

type PartnerSplit {
  partner: Partner!
  percent: IntPercent!
}

enum PlanetSpectrum {
  MARS
  JUPITER
  SATURN
  URANUS
  NEPTUNE
}

enum PlanetaryNebulaSpectrum {
  NGC7009
  IC5117
}

type PlannedTime {
  setup: NonNegDuration!
  acquisition: [StepTime!]!
  acquisitionTotal: StepTime!
  science: [StepTime!]!
  scienceTotal: StepTime!
  total: NonNegDuration!
}

type PlannedTimeSummary {
  pi: NonNegDuration!
  uncharged: NonNegDuration!
  execution: NonNegDuration!
}

type PoorWeather implements ProposalClass {
  minPercentTime: IntPercent!
}

type PosAngleConstraint {
  mode: PosAngleConstraintMode!
  angle: Angle!
}

enum PosAngleConstraintMode {
  UNBOUNDED
  FIXED
  ALLOW_FLIP
  AVERAGE_PARALLACTIC
  PARALLACTIC_OVERRIDE
}

scalar PosBigDecimal

scalar PosInt

type Program {
  id: ProgramId!
  existence: Existence!
  name: NonEmptyString
  proposal: Proposal

  """Principal Investigator"""
  pi: User

  """Users assigned to this science program"""
  users: [ProgramUser!]!
  observations(includeDeleted: Boolean! = false, OFFSET: ObservationId, LIMIT: NonNegInt): ObservationSelectResult!
  plannedTime: PlannedTimeSummary!
}

scalar ProgramId

type ProgramSelectResult {
  matches: [Program!]!
  hasMore: Boolean!
}

type ProperMotion {
  ra: ProperMotionRA!
  dec: ProperMotionDeclination!
}

type ProperMotionDeclination {
  microarcsecondsPerYear: Long!
  milliarcsecondsPerYear: BigDecimal!
}

type ProperMotionRA {
  microarcsecondsPerYear: Long!
  milliarcsecondsPerYear: BigDecimal!
}

type Proposal {
  title: NonEmptyString
  proposalClass: ProposalClass!
  category: TacCategory
  toOActivation: ToOActivation
  abstract: NonEmptyString
  partnerSplits: [PartnerSplit!]!
}

interface ProposalClass {
  minPercentTime: IntPercent!
}

enum ProposalClassEnum {
  CLASSICAL
  DEMO_SCIENCE
  DIRECTORS_TIME
  EXCHANGE
  FAST_TURNAROUND
  INTENSIVE
  LARGE_PROGRAM
  POOR_WEATHER
  QUEUE
  SYSTEM_VERIFICATION
}

enum QuasarSpectrum {
  QS0
  QS02
}

type Query {
  asterism(observationId: ObservationId!, includeDeleted: Boolean! = false): [Target!]!
  asterismGroup(programId: ProgramId!, WHERE: WhereObservation, LIMIT: NonNegInt, includeDeleted: Boolean! = false): AsterismGroupSelectResult!
  constraintSetGroup(programId: ProgramId!, WHERE: WhereObservation, LIMIT: NonNegInt, includeDeleted: Boolean! = false): ConstraintSetGroupSelectResult!
  dataset(observationId: ObservationId!, stepId: StepId!, index: PosInt!): Dataset
  datasets(WHERE: WhereDataset, OFFSET: DatasetIdInput, LIMIT: NonNegInt): DatasetSelectResult!
  executionEvents(WHERE: WhereExecutionEvent, OFFSET: ExecutionEventId, LIMIT: NonNegInt): ExecutionEventSelectResult!
  filterTypeMeta: [FilterTypeMeta!]!
  observation(observationId: ObservationId!): Observation
  observations(programId: ProgramId, WHERE: WhereObservation, OFFSET: ObservationId, LIMIT: NonNegInt, includeDeleted: Boolean! = false): ObservationSelectResult!
  partnerMeta: [PartnerMeta!]!
  program(programId: ProgramId!): Program
  programs(WHERE: WhereProgram, OFFSET: ProgramId, LIMIT: NonNegInt, includeDeleted: Boolean! = false): ProgramSelectResult!
  observingModeGroup(programId: ProgramId!, WHERE: WhereObservation, LIMIT: NonNegInt, includeDeleted: Boolean! = false): ObservingModeGroupSelectResult!
  scienceRequirementsGroup(programId: ProgramId!, WHERE: WhereObservation, LIMIT: NonNegInt, includeDeleted: Boolean! = false): ScienceRequirementsGroupSelectResult!
  target(targetId: TargetId!): Target
  targetEnvironment(observationId: ObservationId!): TargetEnvironment
  targetEnvironmentGroup(programId: ProgramId!, WHERE: WhereObservation, LIMIT: NonNegInt, includeDeleted: Boolean! = false): TargetEnvironmentGroupSelectResult!
  targetGroup(programId: ProgramId!, WHERE: WhereObservation, LIMIT: NonNegInt, includeDeleted: Boolean! = false): TargetGroupSelectResult!
  targets(WHERE: WhereTarget, OFFSET: TargetId, LIMIT: NonNegInt, includeDeleted: Boolean! = false): TargetSelectResult!
}

type Queue implements ProposalClass {
  minPercentTime: IntPercent!
}

type RadialVelocity {
  centimetersPerSecond: Long!
  metersPerSecond: BigDecimal!
  kilometersPerSecond: BigDecimal!
}

type RightAscension {
  hms: HmsString!
  hours: BigDecimal!
  degrees: BigDecimal!
  microarcseconds: Long!
}

type ObservingMode {
  instrument: Instrument!
  mode: ObservingModeType!
  gmosNorthLongSlit: GmosNorthLongSlit
  gmosSouthLongSlit: GmosSouthLongSlit
}

type ObservingModeGroup {
  observationIds: [ObservationId!]!
  observations(includeDeleted: Boolean! = false, OFFSET: ObservationId, LIMIT: NonNegInt): ObservationSelectResult!
  observingMode: ObservingMode
}

type ObservingModeGroupSelectResult {
  matches: [ObservingModeGroup!]!
  hasMore: Boolean!
}

enum ScienceMode {
  IMAGING
  SPECTROSCOPY
}

type ScienceRequirements {
  mode: ScienceMode!
  spectroscopy: SpectroscopyScienceRequirements!
}

type ScienceRequirementsGroup {
  observationIds: [ObservationId!]!
  observations(includeDeleted: Boolean! = false, OFFSET: ObservationId, LIMIT: NonNegInt): ObservationSelectResult!
  scienceRequirements: ScienceRequirements!
}

type ScienceRequirementsGroupSelectResult {
  matches: [ScienceRequirementsGroup!]!
  hasMore: Boolean!
}

enum SequenceCommand {
  ABORT
  CONTINUE
  PAUSE
  SLEW
  START
  STOP
}

type SequenceEvent implements ExecutionEvent {
  location: SequenceEventLocation!
  payload: SequenceEventPayload!
  id: ExecutionEventId!
  visitId: VisitId!
  observation: Observation!
  received: Timestamp!
}

type SequenceEventLocation {
  observationId: ObservationId!
}

type SequenceEventPayload {
  command: SequenceCommand!
}

enum SequenceType {
  ACQUISITION
  SCIENCE
}

type Sidereal {
  ra: RightAscension!
  dec: Declination!
  epoch: EpochString!
  properMotion: ProperMotion
  radialVelocity: RadialVelocity
  parallax: Parallax
  catalogInfo: CatalogInfo
}

type SignalToNoiseMode {
  value: PosBigDecimal!
}

enum SkyBackground {
  DARKEST
  DARK
  GRAY
  BRIGHT
}

type SourceProfile {
  point: SpectralDefinitionIntegrated
  uniform: SpectralDefinitionSurface
  gaussian: GaussianSource
}

type SpectralDefinitionIntegrated {
  bandNormalized: BandNormalizedIntegrated
  emissionLines: EmissionLinesIntegrated
}

type SpectralDefinitionSurface {
  bandNormalized: BandNormalizedSurface
  emissionLines: EmissionLinesSurface
}

enum SpectroscopyCapabilities {
  NOD_AND_SHUFFLE
  POLARIMETRY
  CORONAGRAPHY
}

type SpectroscopyScienceRequirements {
  wavelength: Wavelength
  resolution: PosInt
  signalToNoise: PosBigDecimal
  signalToNoiseAt: Wavelength
  wavelengthCoverage: Wavelength
  focalPlane: FocalPlane
  focalPlaneAngle: Angle
  capability: SpectroscopyCapabilities
}

enum StellarLibrarySpectrum {
  O5_V
  O8_III
  B0_V
  B5_7_V
  B5_III
  B5_I
  A0_V
  A0_III
  A0_I
  A5_V
  A5_III
  F0_V
  F0_III
  F0_I
  F5_V
  F5_V_W
  F6_V_R
  F5_III
  F5_I
  G0_V
  G0_V_W
  G0_V_R
  G0_III
  G0_I
  G2_V
  G5_V
  G5_V_W
  G5_V_R
  G5_III
  G5_III_W
  G5_III_R
  G5_I
  K0_V
  K0_V_R
  K0_III
  K0_III_W
  K0_III_R
  K0_1_II
  K4_V
  K4_III
  K4_III_W
  K4_III_R
  K4_I
  M0_V
  M0_III
  M3_V
  M3_III
  M6_V
  M6_III
  M9_III
}

type StepEvent implements ExecutionEvent {
  location: StepEventLocation!
  payload: StepEventPayload!
  id: ExecutionEventId!
  visitId: VisitId!
  observation: Observation!
  received: Timestamp!
}

type StepEventLocation {
  observationId: ObservationId!
  stepId: StepId!
}

type StepEventPayload {
  sequenceType: SequenceType!
  stepStage: StepStage!
}

scalar StepId

enum StepStage {
  END_CONFIGURE
  END_OBSERVE
  END_STEP
  START_CONFIGURE
  START_OBSERVE
  START_STEP
}

type StepTime {
  configChange: NonNegDuration!
  exposure: NonNegDuration!
  readout: NonNegDuration!
  write: NonNegDuration!
  total: NonNegDuration!
}

type SystemVerification implements ProposalClass {
  minPercentTime: IntPercent!
}

enum TacCategory {
  SMALL_BODIES
  PLANETARY_ATMOSPHERES
  PLANETARY_SURFACES
  SOLAR_SYSTEM_OTHER
  EXOPLANET_RADIAL_VELOCITIES
  EXOPLANET_ATMOSPHERES_ACTIVITY
  EXOPLANET_TRANSITS
  EXOPLANET_HOST_STAR
  EXOPLANET_OTHER
  STELLAR_ASTROPHYSICS
  STELLAR_POPULATIONS
  STAR_FORMATION
  GASEOUS_ASTROPHYSICS
  STELLAR_REMNANTS
  GALACTIC_OTHER
  COSMOLOGY
  CLUSTERS_OF_GALAXIES
  HIGH_Z_UNIVERSE
  LOW_Z_UNIVERSE
  ACTIVE_GALAXIES
  EXTRAGALACTIC_OTHER
}

type Target {
  id: TargetId!
  existence: Existence!
  program(includeDeleted: Boolean! = false): Program!
  name: NonEmptyString!
  sourceProfile: SourceProfile!
  sidereal: Sidereal
  nonsidereal: Nonsidereal
}

type TargetEnvironment {
  asterism(includeDeleted: Boolean! = false): [Target!]!
  firstScienceTarget(includeDeleted: Boolean! = false): Target
  explicitBase: Coordinates
}

type TargetEnvironmentGroup {
  observationIds: [ObservationId!]!
  observations(includeDeleted: Boolean! = false, OFFSET: ObservationId, LIMIT: NonNegInt): ObservationSelectResult!
  targetEnvironment: TargetEnvironment!
}

type TargetEnvironmentGroupSelectResult {
  matches: [TargetEnvironmentGroup!]!
  hasMore: Boolean!
}

type TargetGroup {
  observationIds: [ObservationId!]!
  observations(includeDeleted: Boolean! = false, OFFSET: ObservationId, LIMIT: NonNegInt): ObservationSelectResult!
  target: Target!
}

type TargetGroupSelectResult {
  matches: [TargetGroup!]!
  hasMore: Boolean!
}

scalar TargetId

type TargetSelectResult {
  matches: [Target!]!
  hasMore: Boolean!
}

enum ToOActivation {
  NONE
  STANDARD
  RAPID
}

input UnlinkUserInput {
  """The program to unlink the user from."""
  programId: ProgramId!

  """The user to unlink."""
  userId: UserId!
}

type UnlinkUserResult {
  """Returns true if the user was unlinked, false if no such link existed."""
  result: Boolean!
}

type UnnormalizedSed {
  stellarLibrary: StellarLibrarySpectrum
  coolStar: CoolStarTemperature
  galaxy: GalaxySpectrum
  planet: PlanetSpectrum
  quasar: QuasarSpectrum
  hiiRegion: HiiRegionSpectrum
  planetaryNebula: PlanetaryNebulaSpectrum
  powerLaw: BigDecimal
  blackBodyTempK: PosInt
  fluxDensities: [FluxDensityEntry!]
}

scalar UserId

enum UserType {
  GUEST
  STANDARD
  SERVICE
}

type User {
  id: UserId!
  type: UserType!
  serviceName: String
  orcidId: String
  orcidGivenName: String
  orcidCreditName: String
  orcidFamilyName: String
  orcidEmail: String
}

scalar VisitId

enum WaterVapor {
  VERY_DRY
  DRY
  MEDIAN
  WET
}

type Wavelength {
  picometers: PosInt!
  angstroms: PosBigDecimal!
  nanometers: PosBigDecimal!
  micrometers: PosBigDecimal!
}

type WavelengthDither {
  picometers: Int!
  angstroms: BigDecimal!
  nanometers: BigDecimal!
  micrometers: BigDecimal!
}

input WhereDataset {
  observationId: WhereOrderObservationId
  stepId: WhereEqStepId
  index: WhereOrderDatasetIndex
  filename: WhereString
  qaState: WhereOptionEqQaState
}

input WhereDatasetEvent {
  stepId: WhereEqStepId
  index: WhereOrderDatasetIndex
  stage: WhereOrderDatasetStage
  filename: WhereOptionString
}

input WhereEqPartner {
  EQ: Partner
  NEQ: Partner
  IN: [Partner!]
  NIN: [Partner!]
}

input WhereEqProposalClassType {
  EQ: ProposalClassEnum
  NEQ: ProposalClassEnum
  IN: [ProposalClassEnum!]
  NIN: [ProposalClassEnum!]
}

input WhereEqStepId {
  EQ: StepId
  NEQ: StepId
  IN: [StepId!]
  NIN: [StepId!]
}

input WhereEqToOActivation {
  EQ: ToOActivation
  NEQ: ToOActivation
  IN: [ToOActivation!]
  NIN: [ToOActivation!]
}

input WhereEqVisitId {
  EQ: VisitId
  NEQ: VisitId
  IN: [VisitId!]
  NIN: [VisitId!]
}

input WhereExecutionEvent {
  AND: [WhereExecutionEvent!]
  OR: [WhereExecutionEvent!]
  NOT: WhereExecutionEvent
  id: WhereOrderExecutionEventId
  visitId: WhereEqVisitId
  observationId: WhereOrderObservationId
  received: WhereOrderTimestamp
  sequenceEvent: WhereSequenceEvent
  stepEvent: WhereStepEvent
  datasetEvent: WhereDatasetEvent
}

input WhereObservation {
  AND: [WhereObservation!]
  OR: [WhereObservation!]
  NOT: WhereObservation
  id: WhereOrderObservationId
  subtitle: WhereOptionString
  status: WhereOrderObsStatus
  activeStatus: WhereOrderObsActiveStatus
}

input WhereOptionEqQaState {
  IS_NULL: Boolean
  EQ: DatasetQaState
  NEQ: DatasetQaState
  IN: [DatasetQaState!]
  NIN: [DatasetQaState!]
}

input WhereOptionEqTacCategory {
  IS_NULL: Boolean
  EQ: TacCategory
  NEQ: TacCategory
  IN: [TacCategory!]
  NIN: [TacCategory!]
}

input WhereOptionString {
  IS_NULL: Boolean
  EQ: NonEmptyString
  NEQ: NonEmptyString
  IN: [NonEmptyString!]
  NIN: [NonEmptyString!]
  LIKE: NonEmptyString
  NLIKE: NonEmptyString
  MATCH_CASE: Boolean = true
}

input WhereOrderDatasetIndex {
  EQ: PosInt
  NEQ: PosInt
  IN: [PosInt!]
  NIN: [PosInt!]
  GT: PosInt
  LT: PosInt
  GTE: PosInt
  LTE: PosInt
}

input WhereOrderDatasetStage {
  EQ: DatasetStage
  NEQ: DatasetStage
  IN: [DatasetStage!]
  NIN: [DatasetStage!]
  GT: DatasetStage
  LT: DatasetStage
  GTE: DatasetStage
  LTE: DatasetStage
}

input WhereOrderExecutionEventId {
  EQ: ExecutionEventId
  NEQ: ExecutionEventId
  IN: [ExecutionEventId!]
  NIN: [ExecutionEventId!]
  GT: ExecutionEventId
  LT: ExecutionEventId
  GTE: ExecutionEventId
  LTE: ExecutionEventId
}

input WhereOrderTimestamp {
  EQ: Timestamp
  NEQ: Timestamp
  IN: [Timestamp!]
  NIN: [Timestamp!]
  GT: Timestamp
  LT: Timestamp
  GTE: Timestamp
  LTE: Timestamp
}

input WhereOrderInt {
  EQ: Int
  NEQ: Int
  IN: [Int!]
  NIN: [Int!]
  GT: Int
  LT: Int
  GTE: Int
  LTE: Int
}

input WhereOrderObsActiveStatus {
  EQ: ObsActiveStatus
  NEQ: ObsActiveStatus
  IN: [ObsActiveStatus!]
  NIN: [ObsActiveStatus!]
  GT: ObsActiveStatus
  LT: ObsActiveStatus
  GTE: ObsActiveStatus
  LTE: ObsActiveStatus
}

input WhereOrderObsStatus {
  EQ: ObsStatus
  NEQ: ObsStatus
  IN: [ObsStatus!]
  NIN: [ObsStatus!]
  GT: ObsStatus
  LT: ObsStatus
  GTE: ObsStatus
  LTE: ObsStatus
}

input WhereOrderObservationId {
  EQ: ObservationId
  NEQ: ObservationId
  IN: [ObservationId!]
  NIN: [ObservationId!]
  GT: ObservationId
  LT: ObservationId
  GTE: ObservationId
  LTE: ObservationId
}

input WhereOrderProgramId {
  EQ: ProgramId
  NEQ: ProgramId
  IN: [ProgramId!]
  NIN: [ProgramId!]
  GT: ProgramId
  LT: ProgramId
  GTE: ProgramId
  LTE: ProgramId
}

input WhereOrderSequenceCommand {
  EQ: SequenceCommand
  NEQ: SequenceCommand
  IN: [SequenceCommand!]
  NIN: [SequenceCommand!]
  GT: SequenceCommand
  LT: SequenceCommand
  GTE: SequenceCommand
  LTE: SequenceCommand
}

input WhereOrderSequenceType {
  EQ: SequenceType
  NEQ: SequenceType
  IN: [SequenceType!]
  NIN: [SequenceType!]
  GT: SequenceType
  LT: SequenceType
  GTE: SequenceType
  LTE: SequenceType
}

input WhereOrderStepStage {
  EQ: StepStage
  NEQ: StepStage
  IN: [StepStage!]
  NIN: [StepStage!]
  GT: StepStage
  LT: StepStage
  GTE: StepStage
  LTE: StepStage
}

input WhereOrderTargetId {
  EQ: TargetId
  NEQ: TargetId
  IN: [TargetId!]
  NIN: [TargetId!]
  GT: TargetId
  LT: TargetId
  GTE: TargetId
  LTE: TargetId
}

input WhereProgram {
  AND: [WhereProgram!]
  OR: [WhereProgram!]
  NOT: WhereProgram
  id: WhereOrderProgramId
  name: WhereOptionString
  proposal: WhereProposal
}

input WhereProposal {
  IS_NULL: Boolean
  AND: [WhereProposal!]
  OR: [WhereProposal!]
  NOT: WhereProposal
  title: WhereOptionString
  class: WhereProposalClass
  category: WhereOptionEqTacCategory
  toOActivation: WhereEqToOActivation
  abstract: WhereOptionString
  partners: WhereProposalPartners
}

input WhereProposalClass {
  type: WhereEqProposalClassType
  minPercent: WhereOrderInt
}

input WhereProposalPartnerEntry {
  AND: [WhereProposalPartnerEntry!]
  OR: [WhereProposalPartnerEntry!]
  NOT: WhereProposalPartnerEntry
  partner: WhereEqPartner
  percent: WhereOrderInt
}

input WhereProposalPartners {
  MATCH: WhereProposalPartnerEntry
  EQ: [Partner!]
  isJoint: Boolean
}

input WhereSequenceEvent {
  command: WhereOrderSequenceCommand
}

input WhereStepEvent {
  stepId: WhereEqStepId
  sequenceType: WhereOrderSequenceType
  stage: WhereOrderStepStage
}

input WhereString {
  EQ: NonEmptyString
  NEQ: NonEmptyString
  IN: [NonEmptyString!]
  NIN: [NonEmptyString!]
  LIKE: NonEmptyString
  NLIKE: NonEmptyString
  MATCH_CASE: Boolean = true
}

input WhereTarget {
  AND: [WhereTarget!]
  OR: [WhereTarget!]
  NOT: WhereTarget
  id: WhereOrderTargetId
  programId: WhereOrderProgramId
  name: WhereString
}

type q {
  microarcseconds: Long!
  milliarcseconds: BigDecimal!
  arcseconds: BigDecimal!
}

scalar BigDecimal

scalar Long

"""Enumerated type of filters."""
enum FilterType {
  """Broad-Band Filter"""
  BroadBand

  """Combination Filter"""
  Combination

  """Engineering Filter"""
  Engineering

  """Narrow-Band Filter"""
  NarrowBand

  """Spectroscopic Filter"""
  Spectroscopic
}

"""Enumerated type of partners."""
enum Partner {
  """Argentina"""
  AR

  """Brazil"""
  BR

  """Canada"""
  CA

  """Canada-France-Hawaii Telescope"""
  CFH

  """Chile"""
  CL

  """Guaranteed Time"""
  GT

  """Keck Observatory"""
  KECK

  """Republic of Korea"""
  KR

  """Long Programs"""
  LP

  """Subaru Telescope"""
  SUBARU

  """University of Hawaii"""
  UH

  """United States"""
  US
}

